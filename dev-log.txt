This is a dev log for personal reasons, feel free to read, but be aware some comments may
not be understood due to lack of context, as this is only intended for myself to read

@ Dev log

Date: 01/23/2025

  Goals

   * Refactor UI to display appropriate screens and send signals to game to update game state, attack, etc.

  Tasks Worked On:

    1. Slightly refactored the DisplayDriver object to scale only while drawing and keep
       positions relative to the baseWidth and height of the game
    
  Session highlights:  
    
    What went well: 
      * Worked on relative positioning and established a good way to handle each characters position

    What didn't go well: 
      * Struggled to debug the drawing 
      * Was not able to start on the UI redesign because of the time spent debugging the drawing issues

  Key learnings:

    * It is easier to keep positions relative to one ratio and scale only while drawing

  Random thoughts: 

    * Even though the DisplayDriver keeps scales during drawing and keeps everything relative to the targets
      aspect ratio, the UI cannot function this way. I want the UI to be adaptive to the users screen to allow
      for seemless adjustment and less potential for missing space. The position will not be fixed to the 
      current resolution of the target canvas rather it will change relative to the full canvas. However, the
      size of each element might be fixed relative to the target canvas. Not sure we will see

  Next steps:

    * Continue to work on UI redesign - this will allow the game play to start being worked on
    * Start working game loop programming, attacks, chossing targets, etc
    * Build a full team with all the characters planned in the game (only 3 for now)


Date: 01/24/25

  Goals:
    
    * Build team with all characters, and begin animating idle sprites

  Tasks Worked On: 
    
    1. Added a team construction function to gameState. Just makes a team of all three available characters

  Session highlights:  
    
    What went well: 

    What didn't go well: 

  Key learnings:

  Random thoughts: 

  Next steps:

    * Continue to work on UI redesign - this will allow the game play to start being worked on
    * Start working game loop programming, attacks, chossing targets, etc
    * Animate characters idle positions and attacks. Find effecient way to deal with multiple sprite images

Date: 01/25/25

  Goals:
    
    * redesign UI

  Tasks Worked On: 
    
    * Rewrote UI components and made the UI positioning relative to target aspect ratio
      this eliminated a need to recalculate the UI position on evert resize

  Session highlights:  
    
    What went well: 

      * I was able to trim the UI components down and make the system much easier to us

    What didn't go well: 

      * I wasn't able to complete the system that changes screens based on user input

  Key learnings:

    * UI is hard :( 

  Random thoughts:

    * Padding on the buttons is only padding bottom. I can maybe consider changing this to another type of 
      padding but it really doesn't matter all too much. Maybe I will fix this when/if the UI becomes too
      intense

  Next steps:

    * Add a way to switch subscreens in the current UI system
    * Start working game loop programming, attacks, chossing targets, etc
    * Animate characters idle positions and attacks. Find effecient way to deal with multiple sprite images

Date: 01/26/25

  Goals:
    
    * figure out a good UI page navigation system

  Tasks Worked On: 
    
    * assigned IDS to each generated UI component to enable toggling of children 

  Session highlights:  
    
    What went well: 

      * Used a closure to make an id generating function. Allowed me to toggle components based on id

    What didn't go well: 

      * Toggling system seems a little odd. The list of togglableIDs is held in the button. However, 
        this would make sense considering it is responsible for this event

  Key learnings:

    * UI components can switch screens by marking children visible or not visible which tells the rendering
      system to draw this screen or not

  Random thoughts:

    * Still need to find a way to dynamically switch the button text. My idea is to build construct the 
      UI screens needed to interact and complete a turn but have the UI object be responsible for the 
      content of these screens based on the gameState. Good seperation of concerns IMO

  Next steps:
    
    * Find a way to dynamically change content of screens based on gameState and send correct events that 
      reflect the players choice using the UI elements
    * Start working game loop programming, attacks, chossing targets, etc
    * Animate characters idle positions and attacks. Find effecient way to deal with multiple sprite images
